"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Abi__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: 'stkAave',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'ethUsdPriceFeed',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'aaveUsdPriceFeed',
                type: 'address',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'constructor',
    },
    {
        inputs: [],
        name: 'AAVE_USD_PRICE_FEED',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'ETH_USD_PRICE_FEED',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'STAKED_AAVE',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'stakedAsset',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'oracle',
                type: 'address',
            },
        ],
        name: 'getStakedAssetData',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalSupply',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeCooldownSeconds',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeUnstakeWindow',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeApy',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint128',
                        name: 'distributionPerSecond',
                        type: 'uint128',
                    },
                    {
                        internalType: 'bool',
                        name: 'inPostSlashingPeriod',
                        type: 'bool',
                    },
                    {
                        internalType: 'uint256',
                        name: 'distributionEnd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'maxSlashablePercentage',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenData',
                name: '',
                type: 'tuple',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address[]',
                name: 'stakedAssets',
                type: 'address[]',
            },
            {
                internalType: 'address[]',
                name: 'oracles',
                type: 'address[]',
            },
        ],
        name: 'getStakedAssetDataBatch',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalSupply',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeCooldownSeconds',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeUnstakeWindow',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeApy',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint128',
                        name: 'distributionPerSecond',
                        type: 'uint128',
                    },
                    {
                        internalType: 'bool',
                        name: 'inPostSlashingPeriod',
                        type: 'bool',
                    },
                    {
                        internalType: 'uint256',
                        name: 'distributionEnd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'maxSlashablePercentage',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenData[]',
                name: '',
                type: 'tuple[]',
            },
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'stakedAsset',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'oracle',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
        ],
        name: 'getStakedUserData',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalSupply',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeCooldownSeconds',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeUnstakeWindow',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeApy',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint128',
                        name: 'distributionPerSecond',
                        type: 'uint128',
                    },
                    {
                        internalType: 'bool',
                        name: 'inPostSlashingPeriod',
                        type: 'bool',
                    },
                    {
                        internalType: 'uint256',
                        name: 'distributionEnd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'maxSlashablePercentage',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenData',
                name: '',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenUserBalance',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'underlyingTokenUserBalance',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardsToClaim',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint40',
                        name: 'userCooldownTimestamp',
                        type: 'uint40',
                    },
                    {
                        internalType: 'uint216',
                        name: 'userCooldownAmount',
                        type: 'uint216',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenUserData',
                name: '',
                type: 'tuple',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address[]',
                name: 'stakedAssets',
                type: 'address[]',
            },
            {
                internalType: 'address[]',
                name: 'oracles',
                type: 'address[]',
            },
            {
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
        ],
        name: 'getStakedUserDataBatch',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalSupply',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenTotalRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeCooldownSeconds',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeUnstakeWindow',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardTokenPriceUsd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakeApy',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint128',
                        name: 'distributionPerSecond',
                        type: 'uint128',
                    },
                    {
                        internalType: 'bool',
                        name: 'inPostSlashingPeriod',
                        type: 'bool',
                    },
                    {
                        internalType: 'uint256',
                        name: 'distributionEnd',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'maxSlashablePercentage',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenData[]',
                name: '',
                type: 'tuple[]',
            },
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenUserBalance',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'stakedTokenRedeemableAmount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'underlyingTokenUserBalance',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'rewardsToClaim',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint40',
                        name: 'userCooldownTimestamp',
                        type: 'uint40',
                    },
                    {
                        internalType: 'uint216',
                        name: 'userCooldownAmount',
                        type: 'uint216',
                    },
                ],
                internalType: 'struct IStakedTokenDataProvider.StakedTokenUserData[]',
                name: '',
                type: 'tuple[]',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
];
class Abi__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Abi__factory = Abi__factory;
Abi__factory.abi = _abi;
//# sourceMappingURL=Abi__factory.js.map