/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface FeedRegistryInterfaceInterface extends ethers.utils.Interface {
  functions: {
    'decimals(address,address)': FunctionFragment;
    'description(address,address)': FunctionFragment;
    'latestRoundData(address,address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'decimals',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'description',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'latestRoundData',
    values: [string, string],
  ): string;

  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'description',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'latestRoundData',
    data: BytesLike,
  ): Result;

  events: {};
}

export class FeedRegistryInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeedRegistryInterfaceInterface;

  functions: {
    decimals(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: number;
    }>;

    'decimals(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: number;
    }>;

    description(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    'description(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string;
    }>;

    latestRoundData(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'latestRoundData(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;
  };

  decimals(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<number>;

  'decimals(address,address)'(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<number>;

  description(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  'description(address,address)'(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  latestRoundData(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<{
    roundId: BigNumber;
    answer: BigNumber;
    startedAt: BigNumber;
    updatedAt: BigNumber;
    answeredInRound: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  'latestRoundData(address,address)'(
    base: string,
    quote: string,
    overrides?: CallOverrides,
  ): Promise<{
    roundId: BigNumber;
    answer: BigNumber;
    startedAt: BigNumber;
    updatedAt: BigNumber;
    answeredInRound: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  callStatic: {
    decimals(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    'decimals(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    description(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    'description(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    latestRoundData(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'latestRoundData(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    decimals(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'decimals(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    description(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'description(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    latestRoundData(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'latestRoundData(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'decimals(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    description(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'description(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    latestRoundData(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'latestRoundData(address,address)'(
      base: string,
      quote: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
